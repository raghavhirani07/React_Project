{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport GoTrueAdminApi from './GoTrueAdminApi';\nimport { DEFAULT_HEADERS, EXPIRY_MARGIN, GOTRUE_URL, STORAGE_KEY } from './lib/constants';\nimport { AuthImplicitGrantRedirectError, AuthInvalidCredentialsError, AuthRetryableFetchError, AuthSessionMissingError, AuthUnknownError, isAuthApiError, isAuthError } from './lib/errors';\nimport { _request, _sessionResponse, _userResponse, _ssoResponse } from './lib/fetch';\nimport { decodeJWTPayload, Deferred, getItemAsync, getParameterByName, isBrowser, removeItemAsync, resolveFetch, setItemAsync, uuid, retryable, sleep } from './lib/helpers';\nimport localStorageAdapter from './lib/local-storage';\nimport { polyfillGlobalThis } from './lib/polyfills';\npolyfillGlobalThis(); // Make \"globalThis\" available\n\nconst DEFAULT_OPTIONS = {\n  url: GOTRUE_URL,\n  storageKey: STORAGE_KEY,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  headers: DEFAULT_HEADERS\n};\n/** Current session will be checked for refresh at this interval. */\n\nconst AUTO_REFRESH_TICK_DURATION = 10 * 1000;\n/**\n * A token refresh will be attempted this many ticks before the current session expires. */\n\nconst AUTO_REFRESH_TICK_THRESHOLD = 3;\nexport default class GoTrueClient {\n  /**\n   * Create a new client for use in the browser.\n   */\n  constructor(options) {\n    this.stateChangeEmitters = new Map();\n    this.autoRefreshTicker = null;\n    this.visibilityChangedCallback = null;\n    this.refreshingDeferred = null;\n    /**\n     * Keeps track of the async client initialization.\n     * When null or not yet resolved the auth state is `unknown`\n     * Once resolved the the auth state is known and it's save to call any further client methods.\n     * Keep extra care to never reject or throw uncaught errors\n     */\n\n    this.initializePromise = null;\n    this.detectSessionInUrl = true;\n    /**\n     * Used to broadcast state change events to other tabs listening.\n     */\n\n    this.broadcastChannel = null;\n    const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    this.inMemorySession = null;\n    this.storageKey = settings.storageKey;\n    this.autoRefreshToken = settings.autoRefreshToken;\n    this.persistSession = settings.persistSession;\n    this.storage = settings.storage || localStorageAdapter;\n    this.admin = new GoTrueAdminApi({\n      url: settings.url,\n      headers: settings.headers,\n      fetch: settings.fetch\n    });\n    this.url = settings.url;\n    this.headers = settings.headers;\n    this.fetch = resolveFetch(settings.fetch);\n    this.detectSessionInUrl = settings.detectSessionInUrl;\n    this.mfa = {\n      verify: this._verify.bind(this),\n      enroll: this._enroll.bind(this),\n      unenroll: this._unenroll.bind(this),\n      challenge: this._challenge.bind(this),\n      listFactors: this._listFactors.bind(this),\n      challengeAndVerify: this._challengeAndVerify.bind(this),\n      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this)\n    };\n\n    if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\n      this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);\n      this.broadcastChannel.addEventListener('message', event => {\n        this._notifyAllSubscribers(event.data.event, event.data.session, false); // broadcast = false so we don't get an endless loop of messages\n\n      });\n    }\n\n    this.initialize();\n  }\n  /**\n   * Initializes the client session either from the url or from storage.\n   * This method is automatically called when instantiating the client, but should also be called\n   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n   */\n\n\n  initialize() {\n    if (!this.initializePromise) {\n      this.initializePromise = this._initialize();\n    }\n\n    return this.initializePromise;\n  }\n  /**\n   * IMPORTANT:\n   * 1. Never throw in this method, as it is called from the constructor\n   * 2. Never return a session from this method as it would be cached over\n   *    the whole lifetime of the client\n   */\n\n\n  _initialize() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.initializePromise) {\n        return this.initializePromise;\n      }\n\n      try {\n        if (this.detectSessionInUrl && this._isImplicitGrantFlow()) {\n          const {\n            data,\n            error\n          } = yield this._getSessionFromUrl();\n\n          if (error) {\n            // failed login attempt via url,\n            // remove old session as in verifyOtp, signUp and signInWith*\n            yield this._removeSession();\n            return {\n              error\n            };\n          }\n\n          const {\n            session,\n            redirectType\n          } = data;\n          yield this._saveSession(session);\n\n          this._notifyAllSubscribers('SIGNED_IN', session);\n\n          if (redirectType === 'recovery') {\n            this._notifyAllSubscribers('PASSWORD_RECOVERY', session);\n          }\n\n          return {\n            error: null\n          };\n        } // no login attempt via callback url try to recover session from storage\n\n\n        yield this._recoverAndRefresh();\n        return {\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            error\n          };\n        }\n\n        return {\n          error: new AuthUnknownError('Unexpected error during initialization', error)\n        };\n      } finally {\n        yield this._handleVisibilityChange();\n      }\n    });\n  }\n  /**\n   * Creates a new user.\n   *\n   * Be aware that if a user account exists in the system you may get back an\n   * error message that attempts to hide this information from the user.\n   *\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\n   * @returns A user if the server has \"autoconfirm\" OFF\n   */\n\n\n  signUp(credentials) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n        let res;\n\n        if ('email' in credentials) {\n          const {\n            email,\n            password,\n            options\n          } = credentials;\n          res = yield _request(this.fetch, 'POST', `${this.url}/signup`, {\n            headers: this.headers,\n            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n            body: {\n              email,\n              password,\n              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _sessionResponse\n          });\n        } else if ('phone' in credentials) {\n          const {\n            phone,\n            password,\n            options\n          } = credentials;\n          res = yield _request(this.fetch, 'POST', `${this.url}/signup`, {\n            headers: this.headers,\n            body: {\n              phone,\n              password,\n              data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _sessionResponse\n          });\n        } else {\n          throw new AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n        }\n\n        const {\n          data,\n          error\n        } = res;\n\n        if (error || !data) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: error\n          };\n        }\n\n        const session = data.session;\n        const user = data.user;\n\n        if (data.session) {\n          yield this._saveSession(data.session);\n\n          this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n\n        return {\n          data: {\n            user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Log in an existing user with an email and password or phone and password.\n   *\n   * Be aware that you may get back an error message that will not distingish\n   * between the cases where the account does not exist or that the\n   * email/phone and password combination is wrong or that the account can only\n   * be accessed via social login.\n   */\n\n\n  signInWithPassword(credentials) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n        let res;\n\n        if ('email' in credentials) {\n          const {\n            email,\n            password,\n            options\n          } = credentials;\n          res = yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n            headers: this.headers,\n            body: {\n              email,\n              password,\n              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _sessionResponse\n          });\n        } else if ('phone' in credentials) {\n          const {\n            phone,\n            password,\n            options\n          } = credentials;\n          res = yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n            headers: this.headers,\n            body: {\n              phone,\n              password,\n              data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _sessionResponse\n          });\n        } else {\n          throw new AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n        }\n\n        const {\n          data,\n          error\n        } = res;\n        if (error || !data) return {\n          data: {\n            user: null,\n            session: null\n          },\n          error\n        };\n\n        if (data.session) {\n          yield this._saveSession(data.session);\n\n          this._notifyAllSubscribers('SIGNED_IN', data.session);\n        }\n\n        return {\n          data,\n          error\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Log in an existing user via a third-party provider.\n   */\n\n\n  signInWithOAuth(credentials) {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._removeSession();\n      return this._handleProviderSignIn(credentials.provider, {\n        redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,\n        scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,\n        queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,\n        skipBrowserRedirect: (_d = credentials.options) === null || _d === void 0 ? void 0 : _d.skipBrowserRedirect\n      });\n    });\n  }\n  /**\n   * Allows signing in with an ID token issued by certain supported providers.\n   * The ID token is verified for validity and a new session is established.\n   *\n   * @experimental\n   */\n\n\n  signInWithIdToken(credentials) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._removeSession();\n\n      try {\n        const {\n          options,\n          provider,\n          token,\n          nonce\n        } = credentials;\n        const res = yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\n          headers: this.headers,\n          body: {\n            provider,\n            id_token: token,\n            nonce,\n            gotrue_meta_security: {\n              captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n            }\n          },\n          xform: _sessionResponse\n        });\n        const {\n          data,\n          error\n        } = res;\n        if (error || !data) return {\n          data: {\n            user: null,\n            session: null\n          },\n          error\n        };\n\n        if (data.session) {\n          yield this._saveSession(data.session);\n\n          this._notifyAllSubscribers('SIGNED_IN', data.session);\n        }\n\n        return {\n          data,\n          error\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Log in a user using magiclink or a one-time password (OTP).\n   *\n   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n   *\n   * Be aware that you may get back an error message that will not distinguish\n   * between the cases where the account does not exist or, that the account\n   * can only be accessed via social login.\n   */\n\n\n  signInWithOtp(credentials) {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n\n        if ('email' in credentials) {\n          const {\n            email,\n            options\n          } = credentials;\n          const {\n            error\n          } = yield _request(this.fetch, 'POST', `${this.url}/otp`, {\n            headers: this.headers,\n            body: {\n              email,\n              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n              create_user: (_b = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b !== void 0 ? _b : true,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo\n          });\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n\n        if ('phone' in credentials) {\n          const {\n            phone,\n            options\n          } = credentials;\n          const {\n            error\n          } = yield _request(this.fetch, 'POST', `${this.url}/otp`, {\n            headers: this.headers,\n            body: {\n              phone,\n              data: (_c = options === null || options === void 0 ? void 0 : options.data) !== null && _c !== void 0 ? _c : {},\n              create_user: (_d = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _d !== void 0 ? _d : true,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            }\n          });\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n\n        throw new AuthInvalidCredentialsError('You must provide either an email or phone number.');\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Log in a user given a User supplied OTP received via mobile.\n   */\n\n\n  verifyOtp(params) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n        const {\n          data,\n          error\n        } = yield _request(this.fetch, 'POST', `${this.url}/verify`, {\n          headers: this.headers,\n          body: Object.assign(Object.assign({}, params), {\n            gotrue_meta_security: {\n              captcha_token: (_a = params.options) === null || _a === void 0 ? void 0 : _a.captchaToken\n            }\n          }),\n          redirectTo: (_b = params.options) === null || _b === void 0 ? void 0 : _b.redirectTo,\n          xform: _sessionResponse\n        });\n\n        if (error) {\n          throw error;\n        }\n\n        if (!data) {\n          throw 'An error occurred on token verification.';\n        }\n\n        const session = data.session;\n        const user = data.user;\n\n        if (session === null || session === void 0 ? void 0 : session.access_token) {\n          yield this._saveSession(session);\n\n          this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n\n        return {\n          data: {\n            user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Attempts a single-sign on using an enterprise Identity Provider. A\n   * successful SSO attempt will redirect the current page to the identity\n   * provider authorization page. The redirect URL is implementation and SSO\n   * protocol specific.\n   *\n   * You can use it by providing a SSO domain. Typically you can extract this\n   * domain by asking users for their email address. If this domain is\n   * registered on the Auth instance the redirect will use that organization's\n   * currently active SSO Identity Provider for the login.\n   *\n   * If you have built an organization-specific login page, you can use the\n   * organization's SSO Identity Provider UUID directly instead.\n   *\n   * This API is experimental and availability is conditional on correct\n   * settings on the Auth service.\n   *\n   * @experimental\n   */\n\n\n  signInWithSSO(params) {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this._removeSession();\n        return yield _request(this.fetch, 'POST', `${this.url}/sso`, {\n          body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, 'providerId' in params ? {\n            provider_id: params.providerId\n          } : null), 'domain' in params ? {\n            domain: params.domain\n          } : null), {\n            redirect_to: (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo) !== null && _b !== void 0 ? _b : undefined\n          }), ((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken) ? {\n            gotrue_meta_security: {\n              captcha_token: params.options.captchaToken\n            }\n          } : null), {\n            skip_http_redirect: true\n          }),\n          headers: this.headers,\n          xform: _ssoResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Returns the session, refreshing it if necessary.\n   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n   */\n\n\n  getSession() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // make sure we've read the session from the url if there is one\n      // save to just await, as long we make sure _initialize() never throws\n      yield this.initializePromise;\n      let currentSession = null;\n\n      if (this.persistSession) {\n        const maybeSession = yield getItemAsync(this.storage, this.storageKey);\n\n        if (maybeSession !== null) {\n          if (this._isValidSession(maybeSession)) {\n            currentSession = maybeSession;\n          } else {\n            yield this._removeSession();\n          }\n        }\n      } else {\n        currentSession = this.inMemorySession;\n      }\n\n      if (!currentSession) {\n        return {\n          data: {\n            session: null\n          },\n          error: null\n        };\n      }\n\n      const hasExpired = currentSession.expires_at ? currentSession.expires_at <= Date.now() / 1000 : false;\n\n      if (!hasExpired) {\n        return {\n          data: {\n            session: currentSession\n          },\n          error: null\n        };\n      }\n\n      const {\n        session,\n        error\n      } = yield this._callRefreshToken(currentSession.refresh_token);\n\n      if (error) {\n        return {\n          data: {\n            session: null\n          },\n          error\n        };\n      }\n\n      return {\n        data: {\n          session\n        },\n        error: null\n      };\n    });\n  }\n  /**\n   * Gets the current user details if there is an existing session.\n   * @param jwt Takes in an optional access token jwt. If no jwt is provided, getUser() will attempt to get the jwt from the current session.\n   */\n\n\n  getUser(jwt) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!jwt) {\n          const {\n            data,\n            error\n          } = yield this.getSession();\n\n          if (error) {\n            throw error;\n          } // Default to Authorization header if there is no existing session\n\n\n          jwt = (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined;\n        }\n\n        return yield _request(this.fetch, 'GET', `${this.url}/user`, {\n          headers: this.headers,\n          jwt: jwt,\n          xform: _userResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Updates user data for a logged in user.\n   */\n\n\n  updateUser(attributes) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n\n        if (sessionError) {\n          throw sessionError;\n        }\n\n        if (!sessionData.session) {\n          throw new AuthSessionMissingError();\n        }\n\n        const session = sessionData.session;\n        const {\n          data,\n          error: userError\n        } = yield _request(this.fetch, 'PUT', `${this.url}/user`, {\n          headers: this.headers,\n          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n          body: attributes,\n          jwt: session.access_token,\n          xform: _userResponse\n        });\n        if (userError) throw userError;\n        session.user = data.user;\n        yield this._saveSession(session);\n\n        this._notifyAllSubscribers('USER_UPDATED', session);\n\n        return {\n          data: {\n            user: session.user\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Decodes a JWT (without performing any validation).\n   */\n\n\n  _decodeJWT(jwt) {\n    return decodeJWTPayload(jwt);\n  }\n  /**\n   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n   * If the refresh token or access token in the current session is invalid, an error will be thrown.\n   * @param currentSession The current session that minimally contains an access token and refresh token.\n   */\n\n\n  setSession(currentSession) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!currentSession.access_token || !currentSession.refresh_token) {\n          throw new AuthSessionMissingError();\n        }\n\n        const timeNow = Date.now() / 1000;\n        let expiresAt = timeNow;\n        let hasExpired = true;\n        let session = null;\n        const payload = decodeJWTPayload(currentSession.access_token);\n\n        if (payload.exp) {\n          expiresAt = payload.exp;\n          hasExpired = expiresAt <= timeNow;\n        }\n\n        if (hasExpired) {\n          const {\n            session: refreshedSession,\n            error\n          } = yield this._callRefreshToken(currentSession.refresh_token);\n\n          if (error) {\n            return {\n              data: {\n                user: null,\n                session: null\n              },\n              error: error\n            };\n          }\n\n          if (!refreshedSession) {\n            return {\n              data: {\n                user: null,\n                session: null\n              },\n              error: null\n            };\n          }\n\n          session = refreshedSession;\n        } else {\n          const {\n            data,\n            error\n          } = yield this.getUser(currentSession.access_token);\n\n          if (error) {\n            throw error;\n          }\n\n          session = {\n            access_token: currentSession.access_token,\n            refresh_token: currentSession.refresh_token,\n            user: data.user,\n            token_type: 'bearer',\n            expires_in: expiresAt - timeNow,\n            expires_at: expiresAt\n          };\n          yield this._saveSession(session);\n\n          this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n\n        return {\n          data: {\n            user: session.user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              session: null,\n              user: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Returns a new session, regardless of expiry status.\n   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n   * If the current session's refresh token is invalid, an error will be thrown.\n   * @param currentSession The current session. If passed in, it must contain a refresh token.\n   */\n\n\n  refreshSession(currentSession) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!currentSession) {\n          const {\n            data,\n            error\n          } = yield this.getSession();\n\n          if (error) {\n            throw error;\n          }\n\n          currentSession = (_a = data.session) !== null && _a !== void 0 ? _a : undefined;\n        }\n\n        if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {\n          throw new AuthSessionMissingError();\n        }\n\n        const {\n          session,\n          error\n        } = yield this._callRefreshToken(currentSession.refresh_token);\n\n        if (error) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: error\n          };\n        }\n\n        if (!session) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: null\n          };\n        }\n\n        return {\n          data: {\n            user: session.user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Gets the session data from a URL string\n   */\n\n\n  _getSessionFromUrl() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!isBrowser()) throw new AuthImplicitGrantRedirectError('No browser detected.');\n\n        if (!this._isImplicitGrantFlow()) {\n          throw new AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.');\n        }\n\n        const error_description = getParameterByName('error_description');\n\n        if (error_description) {\n          const error_code = getParameterByName('error_code');\n          if (!error_code) throw new AuthImplicitGrantRedirectError('No error_code detected.');\n          const error = getParameterByName('error');\n          if (!error) throw new AuthImplicitGrantRedirectError('No error detected.');\n          throw new AuthImplicitGrantRedirectError(error_description, {\n            error,\n            code: error_code\n          });\n        }\n\n        const provider_token = getParameterByName('provider_token');\n        const provider_refresh_token = getParameterByName('provider_refresh_token');\n        const access_token = getParameterByName('access_token');\n        if (!access_token) throw new AuthImplicitGrantRedirectError('No access_token detected.');\n        const expires_in = getParameterByName('expires_in');\n        if (!expires_in) throw new AuthImplicitGrantRedirectError('No expires_in detected.');\n        const refresh_token = getParameterByName('refresh_token');\n        if (!refresh_token) throw new AuthImplicitGrantRedirectError('No refresh_token detected.');\n        const token_type = getParameterByName('token_type');\n        if (!token_type) throw new AuthImplicitGrantRedirectError('No token_type detected.');\n        const timeNow = Math.round(Date.now() / 1000);\n        const expires_at = timeNow + parseInt(expires_in);\n        const {\n          data,\n          error\n        } = yield this.getUser(access_token);\n        if (error) throw error;\n        const user = data.user;\n        const session = {\n          provider_token,\n          provider_refresh_token,\n          access_token,\n          expires_in: parseInt(expires_in),\n          expires_at,\n          refresh_token,\n          token_type,\n          user\n        };\n        const redirectType = getParameterByName('type'); // Remove tokens from URL\n\n        window.location.hash = '';\n        return {\n          data: {\n            session,\n            redirectType\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              session: null,\n              redirectType: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n   */\n\n\n  _isImplicitGrantFlow() {\n    return isBrowser() && (Boolean(getParameterByName('access_token')) || Boolean(getParameterByName('error_description')));\n  }\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n   *\n   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n   */\n\n\n  signOut() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data,\n        error: sessionError\n      } = yield this.getSession();\n\n      if (sessionError) {\n        return {\n          error: sessionError\n        };\n      }\n\n      const accessToken = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token;\n\n      if (accessToken) {\n        const {\n          error\n        } = yield this.admin.signOut(accessToken);\n\n        if (error) {\n          // ignore 404s since user might not exist anymore\n          // ignore 401s since an invalid or expired JWT should sign out the current session\n          if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401))) {\n            return {\n              error\n            };\n          }\n        }\n      }\n\n      yield this._removeSession();\n\n      this._notifyAllSubscribers('SIGNED_OUT', null);\n\n      return {\n        error: null\n      };\n    });\n  }\n  /**\n   * Receive a notification every time an auth event happens.\n   * @param callback A callback function to be invoked when an auth event happens.\n   */\n\n\n  onAuthStateChange(callback) {\n    const id = uuid();\n    const subscription = {\n      id,\n      callback,\n      unsubscribe: () => {\n        this.stateChangeEmitters.delete(id);\n      }\n    };\n    this.stateChangeEmitters.set(id, subscription);\n    return {\n      data: {\n        subscription\n      }\n    };\n  }\n  /**\n   * Sends a password reset request to an email address.\n   * @param email The email address of the user.\n   * @param options.redirectTo The URL to send the user to after they click the password reset link.\n   * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n   */\n\n\n  resetPasswordForEmail(email) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _request(this.fetch, 'POST', `${this.url}/recover`, {\n          body: {\n            email,\n            gotrue_meta_security: {\n              captcha_token: options.captchaToken\n            }\n          },\n          headers: this.headers,\n          redirectTo: options.redirectTo\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Generates a new JWT.\n   * @param refreshToken A valid refresh token that was returned on login.\n   */\n\n\n  _refreshAccessToken(refreshToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const startedAt = Date.now(); // will attempt to refresh the token with exponential backoff\n\n        return yield retryable(attempt => __awaiter(this, void 0, void 0, function* () {\n          yield sleep(attempt * 200); // 0, 200, 400, 800, ...\n\n          return yield _request(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\n            body: {\n              refresh_token: refreshToken\n            },\n            headers: this.headers,\n            xform: _sessionResponse\n          });\n        }), (attempt, _, result) => result && result.error && result.error instanceof AuthRetryableFetchError && // retryable only if the request can be sent before the backoff overflows the tick duration\n        Date.now() + (attempt + 1) * 200 - startedAt < AUTO_REFRESH_TICK_DURATION);\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              session: null,\n              user: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _isValidSession(maybeSession) {\n    const isValidSession = typeof maybeSession === 'object' && maybeSession !== null && 'access_token' in maybeSession && 'refresh_token' in maybeSession && 'expires_at' in maybeSession;\n    return isValidSession;\n  }\n\n  _handleProviderSignIn(provider) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    const url = this._getUrlForProvider(provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes,\n      queryParams: options.queryParams\n    }); // try to open on the browser\n\n\n    if (isBrowser() && !options.skipBrowserRedirect) {\n      window.location.assign(url);\n    }\n\n    return {\n      data: {\n        provider,\n        url\n      },\n      error: null\n    };\n  }\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n\n\n  _recoverAndRefresh() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const currentSession = yield getItemAsync(this.storage, this.storageKey);\n\n        if (!this._isValidSession(currentSession)) {\n          if (currentSession !== null) {\n            yield this._removeSession();\n          }\n\n          return;\n        }\n\n        const timeNow = Math.round(Date.now() / 1000);\n\n        if (((_a = currentSession.expires_at) !== null && _a !== void 0 ? _a : Infinity) < timeNow + EXPIRY_MARGIN) {\n          if (this.autoRefreshToken && currentSession.refresh_token) {\n            const {\n              error\n            } = yield this._callRefreshToken(currentSession.refresh_token);\n\n            if (error) {\n              console.log(error.message);\n              yield this._removeSession();\n            }\n          } else {\n            yield this._removeSession();\n          }\n        } else {\n          if (this.persistSession) {\n            yield this._saveSession(currentSession);\n          }\n\n          this._notifyAllSubscribers('SIGNED_IN', currentSession);\n        }\n      } catch (err) {\n        console.error(err);\n        return;\n      }\n    });\n  }\n\n  _callRefreshToken(refreshToken) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      // refreshing is already in progress\n      if (this.refreshingDeferred) {\n        return this.refreshingDeferred.promise;\n      }\n\n      try {\n        this.refreshingDeferred = new Deferred();\n\n        if (!refreshToken) {\n          throw new AuthSessionMissingError();\n        }\n\n        const {\n          data,\n          error\n        } = yield this._refreshAccessToken(refreshToken);\n        if (error) throw error;\n        if (!data.session) throw new AuthSessionMissingError();\n        yield this._saveSession(data.session);\n\n        this._notifyAllSubscribers('TOKEN_REFRESHED', data.session);\n\n        const result = {\n          session: data.session,\n          error: null\n        };\n        this.refreshingDeferred.resolve(result);\n        return result;\n      } catch (error) {\n        if (isAuthError(error)) {\n          const result = {\n            session: null,\n            error\n          };\n          (_a = this.refreshingDeferred) === null || _a === void 0 ? void 0 : _a.resolve(result);\n          return result;\n        }\n\n        (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(error);\n        throw error;\n      } finally {\n        this.refreshingDeferred = null;\n      }\n    });\n  }\n\n  _notifyAllSubscribers(event, session) {\n    let broadcast = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (this.broadcastChannel && broadcast) {\n      this.broadcastChannel.postMessage({\n        event,\n        session\n      });\n    }\n\n    this.stateChangeEmitters.forEach(x => x.callback(event, session));\n  }\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n\n\n  _saveSession(session) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.persistSession) {\n        this.inMemorySession = session;\n      }\n\n      if (this.persistSession && session.expires_at) {\n        yield this._persistSession(session);\n      }\n    });\n  }\n\n  _persistSession(currentSession) {\n    return setItemAsync(this.storage, this.storageKey, currentSession);\n  }\n\n  _removeSession() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.persistSession) {\n        yield removeItemAsync(this.storage, this.storageKey);\n      } else {\n        this.inMemorySession = null;\n      }\n    });\n  }\n  /**\n   * Removes any registered visibilitychange callback.\n   *\n   * {@see #startAutoRefresh}\n   * {@see #stopAutoRefresh}\n   */\n\n\n  _removeVisibilityChangedCallback() {\n    const callback = this.visibilityChangedCallback;\n    this.visibilityChangedCallback = null;\n\n    try {\n      if (callback && isBrowser() && (window === null || window === void 0 ? void 0 : window.removeEventListener)) {\n        window.removeEventListener('visibilitychange', callback);\n      }\n    } catch (e) {\n      console.error('removing visibilitychange callback failed', e);\n    }\n  }\n  /**\n   * This is the private implementation of {@link #startAutoRefresh}. Use this\n   * within the library.\n   */\n\n\n  _startAutoRefresh() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._stopAutoRefresh();\n      const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION);\n      this.autoRefreshTicker = ticker;\n\n      if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\n        // ticker is a NodeJS Timeout object that has an `unref` method\n        // https://nodejs.org/api/timers.html#timeoutunref\n        // When auto refresh is used in NodeJS (like for testing) the\n        // `setInterval` is preventing the process from being marked as\n        // finished and tests run endlessly. This can be prevented by calling\n        // `unref()` on the returned object.\n        ticker.unref();\n      } // run the tick immediately\n\n\n      yield this._autoRefreshTokenTick();\n    });\n  }\n  /**\n   * This is the private implementation of {@link #stopAutoRefresh}. Use this\n   * within the library.\n   */\n\n\n  _stopAutoRefresh() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const ticker = this.autoRefreshTicker;\n      this.autoRefreshTicker = null;\n\n      if (ticker) {\n        clearInterval(ticker);\n      }\n    });\n  }\n  /**\n   * Starts an auto-refresh process in the background. The session is checked\n   * every few seconds. Close to the time of expiration a process is started to\n   * refresh the session. If refreshing fails it will be retried for as long as\n   * necessary.\n   *\n   * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\n   * to call this function, it will be called for you.\n   *\n   * On browsers the refresh process works only when the tab/window is in the\n   * foreground to conserve resources as well as prevent race conditions and\n   * flooding auth with requests. If you call this method any managed\n   * visibility change callback will be removed and you must manage visibility\n   * changes on your own.\n   *\n   * On non-browser platforms the refresh process works *continuously* in the\n   * background, which may not be desireable. You should hook into your\n   * platform's foreground indication mechanism and call these methods\n   * appropriately to conserve resources.\n   *\n   * {@see #stopAutoRefresh}\n   */\n\n\n  startAutoRefresh() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._removeVisibilityChangedCallback();\n\n      yield this._startAutoRefresh();\n    });\n  }\n  /**\n   * Stops an active auto refresh process running in the background (if any).\n   *\n   * If you call this method any managed visibility change callback will be\n   * removed and you must manage visibility changes on your own.\n   *\n   * See {@link #startAutoRefresh} for more details.\n   */\n\n\n  stopAutoRefresh() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._removeVisibilityChangedCallback();\n\n      yield this._stopAutoRefresh();\n    });\n  }\n  /**\n   * Runs the auto refresh token tick.\n   */\n\n\n  _autoRefreshTokenTick() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const now = Date.now();\n\n      try {\n        const {\n          data: {\n            session\n          }\n        } = yield this.getSession();\n\n        if (!session || !session.refresh_token || !session.expires_at) {\n          return;\n        } // session will expire in this many ticks (or has already expired if <= 0)\n\n\n        const expiresInTicks = Math.floor((session.expires_at * 1000 - now) / AUTO_REFRESH_TICK_DURATION);\n\n        if (expiresInTicks < AUTO_REFRESH_TICK_THRESHOLD) {\n          yield this._callRefreshToken(session.refresh_token);\n        }\n      } catch (e) {\n        console.error('Auto refresh tick failed with error. This is likely a transient error.', e);\n      }\n    });\n  }\n  /**\n   * Registers callbacks on the browser / platform, which in-turn run\n   * algorithms when the browser window/tab are in foreground. On non-browser\n   * platforms it assumes always foreground.\n   */\n\n\n  _handleVisibilityChange() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n        if (this.autoRefreshToken) {\n          // in non-browser environments the refresh token ticker runs always\n          this.startAutoRefresh();\n        }\n\n        return false;\n      }\n\n      try {\n        this.visibilityChangedCallback = () => __awaiter(this, void 0, void 0, function* () {\n          return yield this._onVisibilityChanged(false);\n        });\n\n        window === null || window === void 0 ? void 0 : window.addEventListener('visibilitychange', this.visibilityChangedCallback); // now immediately call the visbility changed callback to setup with the\n        // current visbility state\n\n        yield this._onVisibilityChanged(true); // initial call\n      } catch (error) {\n        console.error('_handleVisibilityChange', error);\n      }\n    });\n  }\n  /**\n   * Callback registered with `window.addEventListener('visibilitychange')`.\n   */\n\n\n  _onVisibilityChanged(isInitial) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (document.visibilityState === 'visible') {\n        if (!isInitial) {\n          // initial visibility change setup is handled in another flow under #initialize()\n          yield this.initializePromise;\n          yield this._recoverAndRefresh();\n        }\n\n        if (this.autoRefreshToken) {\n          // in browser environments the refresh token ticker runs only on focused tabs\n          // which prevents race conditions\n          this._startAutoRefresh();\n        }\n      } else if (document.visibilityState === 'hidden') {\n        if (this.autoRefreshToken) {\n          this._stopAutoRefresh();\n        }\n      }\n    });\n  }\n  /**\n   * Generates the relevant login URL for a third-party provider.\n   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n   */\n\n\n  _getUrlForProvider(provider, options) {\n    const urlParams = [`provider=${encodeURIComponent(provider)}`];\n\n    if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.scopes) {\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.queryParams) {\n      const query = new URLSearchParams(options.queryParams);\n      urlParams.push(query.toString());\n    }\n\n    return `${this.url}/authorize?${urlParams.join('&')}`;\n  }\n\n  _unenroll(params) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n\n        if (sessionError) {\n          return {\n            data: null,\n            error: sessionError\n          };\n        }\n\n        return yield _request(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\n          headers: this.headers,\n          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * {@see GoTrueMFAApi#enroll}\n   */\n\n\n  _enroll(params) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n\n        if (sessionError) {\n          return {\n            data: null,\n            error: sessionError\n          };\n        }\n\n        const {\n          data,\n          error\n        } = yield _request(this.fetch, 'POST', `${this.url}/factors`, {\n          body: {\n            friendly_name: params.friendlyName,\n            factor_type: params.factorType,\n            issuer: params.issuer\n          },\n          headers: this.headers,\n          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n        });\n\n        if (error) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        if ((_b = data === null || data === void 0 ? void 0 : data.totp) === null || _b === void 0 ? void 0 : _b.qr_code) {\n          data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`;\n        }\n\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * {@see GoTrueMFAApi#verify}\n   */\n\n\n  _verify(params) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n\n        if (sessionError) {\n          return {\n            data: null,\n            error: sessionError\n          };\n        }\n\n        const {\n          data,\n          error\n        } = yield _request(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/verify`, {\n          body: {\n            code: params.code,\n            challenge_id: params.challengeId\n          },\n          headers: this.headers,\n          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n        });\n\n        if (error) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        yield this._saveSession(Object.assign({\n          expires_at: Math.round(Date.now() / 1000) + data.expires_in\n        }, data));\n\n        this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data);\n\n        return {\n          data,\n          error\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * {@see GoTrueMFAApi#challenge}\n   */\n\n\n  _challenge(params) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data: sessionData,\n          error: sessionError\n        } = yield this.getSession();\n\n        if (sessionError) {\n          return {\n            data: null,\n            error: sessionError\n          };\n        }\n\n        return yield _request(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/challenge`, {\n          headers: this.headers,\n          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * {@see GoTrueMFAApi#challengeAndVerify}\n   */\n\n\n  _challengeAndVerify(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data: challengeData,\n        error: challengeError\n      } = yield this._challenge({\n        factorId: params.factorId\n      });\n\n      if (challengeError) {\n        return {\n          data: null,\n          error: challengeError\n        };\n      }\n\n      return yield this._verify({\n        factorId: params.factorId,\n        challengeId: challengeData.id,\n        code: params.code\n      });\n    });\n  }\n  /**\n   * {@see GoTrueMFAApi#listFactors}\n   */\n\n\n  _listFactors() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data: {\n          user\n        },\n        error: userError\n      } = yield this.getUser();\n\n      if (userError) {\n        return {\n          data: null,\n          error: userError\n        };\n      }\n\n      const factors = (user === null || user === void 0 ? void 0 : user.factors) || [];\n      const totp = factors.filter(factor => factor.factor_type === 'totp' && factor.status === 'verified');\n      return {\n        data: {\n          all: factors,\n          totp\n        },\n        error: null\n      };\n    });\n  }\n  /**\n   * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\n   */\n\n\n  _getAuthenticatorAssuranceLevel() {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data: {\n          session\n        },\n        error: sessionError\n      } = yield this.getSession();\n\n      if (sessionError) {\n        return {\n          data: null,\n          error: sessionError\n        };\n      }\n\n      if (!session) {\n        return {\n          data: {\n            currentLevel: null,\n            nextLevel: null,\n            currentAuthenticationMethods: []\n          },\n          error: null\n        };\n      }\n\n      const payload = this._decodeJWT(session.access_token);\n\n      let currentLevel = null;\n\n      if (payload.aal) {\n        currentLevel = payload.aal;\n      }\n\n      let nextLevel = currentLevel;\n      const verifiedFactors = (_b = (_a = session.user.factors) === null || _a === void 0 ? void 0 : _a.filter(factor => factor.status === 'verified')) !== null && _b !== void 0 ? _b : [];\n\n      if (verifiedFactors.length > 0) {\n        nextLevel = 'aal2';\n      }\n\n      const currentAuthenticationMethods = payload.amr || [];\n      return {\n        data: {\n          currentLevel,\n          nextLevel,\n          currentAuthenticationMethods\n        },\n        error: null\n      };\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["GoTrueAdminApi","DEFAULT_HEADERS","EXPIRY_MARGIN","GOTRUE_URL","STORAGE_KEY","AuthImplicitGrantRedirectError","AuthInvalidCredentialsError","AuthRetryableFetchError","AuthSessionMissingError","AuthUnknownError","isAuthApiError","isAuthError","_request","_sessionResponse","_userResponse","_ssoResponse","decodeJWTPayload","Deferred","getItemAsync","getParameterByName","isBrowser","removeItemAsync","resolveFetch","setItemAsync","uuid","retryable","sleep","localStorageAdapter","polyfillGlobalThis","DEFAULT_OPTIONS","url","storageKey","autoRefreshToken","persistSession","detectSessionInUrl","headers","AUTO_REFRESH_TICK_DURATION","AUTO_REFRESH_TICK_THRESHOLD","GoTrueClient","constructor","options","Map","settings","inMemorySession","storage","admin","fetch","mfa","verify","_verify","bind","enroll","_enroll","unenroll","_unenroll","challenge","_challenge","listFactors","_listFactors","challengeAndVerify","_challengeAndVerify","getAuthenticatorAssuranceLevel","_getAuthenticatorAssuranceLevel","globalThis","BroadcastChannel","broadcastChannel","addEventListener","event","_notifyAllSubscribers","data","session","initialize","initializePromise","_initialize","_isImplicitGrantFlow","error","_getSessionFromUrl","_removeSession","redirectType","_saveSession","_recoverAndRefresh","_handleVisibilityChange","signUp","credentials","res","email","password","redirectTo","emailRedirectTo","body","_a","gotrue_meta_security","captcha_token","captchaToken","xform","phone","_b","user","signInWithPassword","signInWithOAuth","_handleProviderSignIn","provider","scopes","queryParams","_c","skipBrowserRedirect","_d","signInWithIdToken","token","nonce","id_token","signInWithOtp","create_user","shouldCreateUser","verifyOtp","params","access_token","signInWithSSO","provider_id","providerId","domain","redirect_to","undefined","skip_http_redirect","getSession","currentSession","maybeSession","_isValidSession","hasExpired","expires_at","Date","now","_callRefreshToken","refresh_token","getUser","jwt","updateUser","attributes","sessionData","sessionError","userError","_decodeJWT","setSession","timeNow","expiresAt","payload","exp","refreshedSession","token_type","expires_in","refreshSession","error_description","error_code","code","provider_token","provider_refresh_token","Math","round","parseInt","window","location","hash","Boolean","signOut","accessToken","status","onAuthStateChange","callback","id","subscription","unsubscribe","stateChangeEmitters","delete","set","resetPasswordForEmail","_refreshAccessToken","refreshToken","startedAt","attempt","__awaiter","_","result","isValidSession","_getUrlForProvider","assign","Infinity","console","log","message","err","refreshingDeferred","promise","resolve","reject","broadcast","postMessage","forEach","x","_persistSession","_removeVisibilityChangedCallback","visibilityChangedCallback","removeEventListener","e","_startAutoRefresh","_stopAutoRefresh","ticker","setInterval","_autoRefreshTokenTick","autoRefreshTicker","unref","clearInterval","startAutoRefresh","stopAutoRefresh","expiresInTicks","floor","_onVisibilityChanged","isInitial","document","visibilityState","urlParams","encodeURIComponent","push","query","URLSearchParams","toString","join","factorId","friendly_name","friendlyName","factor_type","factorType","issuer","totp","qr_code","challenge_id","challengeId","Object","challengeData","challengeError","factors","filter","factor","all","currentLevel","nextLevel","currentAuthenticationMethods","aal","verifiedFactors","length","amr"],"sources":["D:\\React_js\\pratice\\node_modules\\@supabase\\gotrue-js\\src\\GoTrueClient.ts"],"sourcesContent":["import GoTrueAdminApi from './GoTrueAdminApi'\nimport { DEFAULT_HEADERS, EXPIRY_MARGIN, GOTRUE_URL, STORAGE_KEY } from './lib/constants'\nimport {\n  AuthError,\n  AuthImplicitGrantRedirectError,\n  AuthInvalidCredentialsError,\n  AuthRetryableFetchError,\n  AuthSessionMissingError,\n  AuthUnknownError,\n  isAuthApiError,\n  isAuthError,\n} from './lib/errors'\nimport { Fetch, _request, _sessionResponse, _userResponse, _ssoResponse } from './lib/fetch'\nimport {\n  decodeJWTPayload,\n  Deferred,\n  getItemAsync,\n  getParameterByName,\n  isBrowser,\n  removeItemAsync,\n  resolveFetch,\n  setItemAsync,\n  uuid,\n  retryable,\n  sleep,\n} from './lib/helpers'\nimport localStorageAdapter from './lib/local-storage'\nimport { polyfillGlobalThis } from './lib/polyfills'\nimport type {\n  AuthChangeEvent,\n  AuthResponse,\n  CallRefreshTokenResult,\n  GoTrueClientOptions,\n  InitializeResult,\n  OAuthResponse,\n  SSOResponse,\n  Provider,\n  Session,\n  SignInWithIdTokenCredentials,\n  SignInWithOAuthCredentials,\n  SignInWithPasswordCredentials,\n  SignInWithPasswordlessCredentials,\n  SignUpWithPasswordCredentials,\n  SignInWithSSO,\n  Subscription,\n  SupportedStorage,\n  User,\n  UserAttributes,\n  UserResponse,\n  VerifyOtpParams,\n  GoTrueMFAApi,\n  MFAEnrollParams,\n  AuthMFAEnrollResponse,\n  MFAChallengeParams,\n  AuthMFAChallengeResponse,\n  MFAUnenrollParams,\n  AuthMFAUnenrollResponse,\n  MFAVerifyParams,\n  AuthMFAVerifyResponse,\n  AuthMFAListFactorsResponse,\n  AMREntry,\n  AuthMFAGetAuthenticatorAssuranceLevelResponse,\n  AuthenticatorAssuranceLevels,\n  Factor,\n  MFAChallengeAndVerifyParams,\n} from './lib/types'\n\npolyfillGlobalThis() // Make \"globalThis\" available\n\nconst DEFAULT_OPTIONS: Omit<Required<GoTrueClientOptions>, 'fetch' | 'storage'> = {\n  url: GOTRUE_URL,\n  storageKey: STORAGE_KEY,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  headers: DEFAULT_HEADERS,\n}\n\n/** Current session will be checked for refresh at this interval. */\nconst AUTO_REFRESH_TICK_DURATION = 10 * 1000\n\n/**\n * A token refresh will be attempted this many ticks before the current session expires. */\nconst AUTO_REFRESH_TICK_THRESHOLD = 3\n\nexport default class GoTrueClient {\n  /**\n   * Namespace for the GoTrue admin methods.\n   * These methods should only be used in a trusted server-side environment.\n   */\n  admin: GoTrueAdminApi\n  /**\n   * Namespace for the MFA methods.\n   */\n  mfa: GoTrueMFAApi\n  /**\n   * The storage key used to identify the values saved in localStorage\n   */\n  protected storageKey: string\n\n  /**\n   * The session object for the currently logged in user. If null, it means there isn't a logged-in user.\n   * Only used if persistSession is false.\n   */\n  protected inMemorySession: Session | null\n\n  protected autoRefreshToken: boolean\n  protected persistSession: boolean\n  protected storage: SupportedStorage\n  protected stateChangeEmitters: Map<string, Subscription> = new Map()\n  protected autoRefreshTicker: ReturnType<typeof setInterval> | null = null\n  protected visibilityChangedCallback: (() => Promise<any>) | null = null\n  protected refreshingDeferred: Deferred<CallRefreshTokenResult> | null = null\n  /**\n   * Keeps track of the async client initialization.\n   * When null or not yet resolved the auth state is `unknown`\n   * Once resolved the the auth state is known and it's save to call any further client methods.\n   * Keep extra care to never reject or throw uncaught errors\n   */\n  protected initializePromise: Promise<InitializeResult> | null = null\n  protected detectSessionInUrl = true\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected fetch: Fetch\n\n  /**\n   * Used to broadcast state change events to other tabs listening.\n   */\n  protected broadcastChannel: BroadcastChannel | null = null\n\n  /**\n   * Create a new client for use in the browser.\n   */\n  constructor(options: GoTrueClientOptions) {\n    const settings = { ...DEFAULT_OPTIONS, ...options }\n    this.inMemorySession = null\n    this.storageKey = settings.storageKey\n    this.autoRefreshToken = settings.autoRefreshToken\n    this.persistSession = settings.persistSession\n    this.storage = settings.storage || localStorageAdapter\n    this.admin = new GoTrueAdminApi({\n      url: settings.url,\n      headers: settings.headers,\n      fetch: settings.fetch,\n    })\n\n    this.url = settings.url\n    this.headers = settings.headers\n    this.fetch = resolveFetch(settings.fetch)\n    this.detectSessionInUrl = settings.detectSessionInUrl\n\n    this.mfa = {\n      verify: this._verify.bind(this),\n      enroll: this._enroll.bind(this),\n      unenroll: this._unenroll.bind(this),\n      challenge: this._challenge.bind(this),\n      listFactors: this._listFactors.bind(this),\n      challengeAndVerify: this._challengeAndVerify.bind(this),\n      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this),\n    }\n\n    if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\n      this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey)\n      this.broadcastChannel.addEventListener('message', (event) => {\n        this._notifyAllSubscribers(event.data.event, event.data.session, false) // broadcast = false so we don't get an endless loop of messages\n      })\n    }\n\n    this.initialize()\n  }\n\n  /**\n   * Initializes the client session either from the url or from storage.\n   * This method is automatically called when instantiating the client, but should also be called\n   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n   */\n  initialize(): Promise<InitializeResult> {\n    if (!this.initializePromise) {\n      this.initializePromise = this._initialize()\n    }\n\n    return this.initializePromise\n  }\n\n  /**\n   * IMPORTANT:\n   * 1. Never throw in this method, as it is called from the constructor\n   * 2. Never return a session from this method as it would be cached over\n   *    the whole lifetime of the client\n   */\n  private async _initialize(): Promise<InitializeResult> {\n    if (this.initializePromise) {\n      return this.initializePromise\n    }\n\n    try {\n      if (this.detectSessionInUrl && this._isImplicitGrantFlow()) {\n        const { data, error } = await this._getSessionFromUrl()\n\n        if (error) {\n          // failed login attempt via url,\n          // remove old session as in verifyOtp, signUp and signInWith*\n          await this._removeSession()\n\n          return { error }\n        }\n\n        const { session, redirectType } = data\n\n        await this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n        if (redirectType === 'recovery') {\n          this._notifyAllSubscribers('PASSWORD_RECOVERY', session)\n        }\n\n        return { error: null }\n      }\n\n      // no login attempt via callback url try to recover session from storage\n      await this._recoverAndRefresh()\n      return { error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { error }\n      }\n\n      return {\n        error: new AuthUnknownError('Unexpected error during initialization', error),\n      }\n    } finally {\n      await this._handleVisibilityChange()\n    }\n  }\n\n  /**\n   * Creates a new user.\n   *\n   * Be aware that if a user account exists in the system you may get back an\n   * error message that attempts to hide this information from the user.\n   *\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\n   * @returns A user if the server has \"autoconfirm\" OFF\n   */\n  async signUp(credentials: SignUpWithPasswordCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      let res: AuthResponse\n      if ('email' in credentials) {\n        const { email, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          redirectTo: options?.emailRedirectTo,\n          body: {\n            email,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else if ('phone' in credentials) {\n        const { phone, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          body: {\n            phone,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else {\n        throw new AuthInvalidCredentialsError(\n          'You must provide either an email or phone number and a password'\n        )\n      }\n\n      const { data, error } = res\n\n      if (error || !data) {\n        return { data: { user: null, session: null }, error: error }\n      }\n\n      const session: Session | null = data.session\n      const user: User | null = data.user\n\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Log in an existing user with an email and password or phone and password.\n   *\n   * Be aware that you may get back an error message that will not distingish\n   * between the cases where the account does not exist or that the\n   * email/phone and password combination is wrong or that the account can only\n   * be accessed via social login.\n   */\n  async signInWithPassword(credentials: SignInWithPasswordCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      let res: AuthResponse\n      if ('email' in credentials) {\n        const { email, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n          headers: this.headers,\n          body: {\n            email,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else if ('phone' in credentials) {\n        const { phone, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n          headers: this.headers,\n          body: {\n            phone,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else {\n        throw new AuthInvalidCredentialsError(\n          'You must provide either an email or phone number and a password'\n        )\n      }\n      const { data, error } = res\n      if (error || !data) return { data: { user: null, session: null }, error }\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', data.session)\n      }\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Log in an existing user via a third-party provider.\n   */\n  async signInWithOAuth(credentials: SignInWithOAuthCredentials): Promise<OAuthResponse> {\n    await this._removeSession()\n    return this._handleProviderSignIn(credentials.provider, {\n      redirectTo: credentials.options?.redirectTo,\n      scopes: credentials.options?.scopes,\n      queryParams: credentials.options?.queryParams,\n      skipBrowserRedirect: credentials.options?.skipBrowserRedirect,\n    })\n  }\n\n  /**\n   * Allows signing in with an ID token issued by certain supported providers.\n   * The ID token is verified for validity and a new session is established.\n   *\n   * @experimental\n   */\n  async signInWithIdToken(credentials: SignInWithIdTokenCredentials): Promise<AuthResponse> {\n    await this._removeSession()\n\n    try {\n      const { options, provider, token, nonce } = credentials\n\n      const res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\n        headers: this.headers,\n        body: {\n          provider,\n          id_token: token,\n          nonce,\n          gotrue_meta_security: { captcha_token: options?.captchaToken },\n        },\n        xform: _sessionResponse,\n      })\n\n      const { data, error } = res\n      if (error || !data) return { data: { user: null, session: null }, error }\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', data.session)\n      }\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Log in a user using magiclink or a one-time password (OTP).\n   *\n   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n   *\n   * Be aware that you may get back an error message that will not distinguish\n   * between the cases where the account does not exist or, that the account\n   * can only be accessed via social login.\n   */\n  async signInWithOtp(credentials: SignInWithPasswordlessCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      if ('email' in credentials) {\n        const { email, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n          headers: this.headers,\n          body: {\n            email,\n            data: options?.data ?? {},\n            create_user: options?.shouldCreateUser ?? true,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          redirectTo: options?.emailRedirectTo,\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      if ('phone' in credentials) {\n        const { phone, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n          headers: this.headers,\n          body: {\n            phone,\n            data: options?.data ?? {},\n            create_user: options?.shouldCreateUser ?? true,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      throw new AuthInvalidCredentialsError('You must provide either an email or phone number.')\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Log in a user given a User supplied OTP received via mobile.\n   */\n  async verifyOtp(params: VerifyOtpParams): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/verify`, {\n        headers: this.headers,\n        body: {\n          ...params,\n          gotrue_meta_security: { captcha_token: params.options?.captchaToken },\n        },\n        redirectTo: params.options?.redirectTo,\n        xform: _sessionResponse,\n      })\n\n      if (error) {\n        throw error\n      }\n\n      if (!data) {\n        throw 'An error occurred on token verification.'\n      }\n\n      const session: Session | null = data.session\n      const user: User = data.user\n\n      if (session?.access_token) {\n        await this._saveSession(session as Session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Attempts a single-sign on using an enterprise Identity Provider. A\n   * successful SSO attempt will redirect the current page to the identity\n   * provider authorization page. The redirect URL is implementation and SSO\n   * protocol specific.\n   *\n   * You can use it by providing a SSO domain. Typically you can extract this\n   * domain by asking users for their email address. If this domain is\n   * registered on the Auth instance the redirect will use that organization's\n   * currently active SSO Identity Provider for the login.\n   *\n   * If you have built an organization-specific login page, you can use the\n   * organization's SSO Identity Provider UUID directly instead.\n   *\n   * This API is experimental and availability is conditional on correct\n   * settings on the Auth service.\n   *\n   * @experimental\n   */\n  async signInWithSSO(params: SignInWithSSO): Promise<SSOResponse> {\n    try {\n      await this._removeSession()\n\n      return await _request(this.fetch, 'POST', `${this.url}/sso`, {\n        body: {\n          ...('providerId' in params ? { provider_id: params.providerId } : null),\n          ...('domain' in params ? { domain: params.domain } : null),\n          redirect_to: params.options?.redirectTo ?? undefined,\n          ...(params?.options?.captchaToken\n            ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } }\n            : null),\n          skip_http_redirect: true, // fetch does not handle redirects\n        },\n        headers: this.headers,\n        xform: _ssoResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Returns the session, refreshing it if necessary.\n   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n   */\n  async getSession(): Promise<\n    | {\n        data: {\n          session: Session\n        }\n        error: null\n      }\n    | {\n        data: {\n          session: null\n        }\n        error: AuthError\n      }\n    | {\n        data: {\n          session: null\n        }\n        error: null\n      }\n  > {\n    // make sure we've read the session from the url if there is one\n    // save to just await, as long we make sure _initialize() never throws\n    await this.initializePromise\n\n    let currentSession: Session | null = null\n\n    if (this.persistSession) {\n      const maybeSession = await getItemAsync(this.storage, this.storageKey)\n\n      if (maybeSession !== null) {\n        if (this._isValidSession(maybeSession)) {\n          currentSession = maybeSession\n        } else {\n          await this._removeSession()\n        }\n      }\n    } else {\n      currentSession = this.inMemorySession\n    }\n\n    if (!currentSession) {\n      return { data: { session: null }, error: null }\n    }\n\n    const hasExpired = currentSession.expires_at\n      ? currentSession.expires_at <= Date.now() / 1000\n      : false\n    if (!hasExpired) {\n      return { data: { session: currentSession }, error: null }\n    }\n\n    const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\n    if (error) {\n      return { data: { session: null }, error }\n    }\n\n    return { data: { session }, error: null }\n  }\n\n  /**\n   * Gets the current user details if there is an existing session.\n   * @param jwt Takes in an optional access token jwt. If no jwt is provided, getUser() will attempt to get the jwt from the current session.\n   */\n  async getUser(jwt?: string): Promise<UserResponse> {\n    try {\n      if (!jwt) {\n        const { data, error } = await this.getSession()\n        if (error) {\n          throw error\n        }\n\n        // Default to Authorization header if there is no existing session\n        jwt = data.session?.access_token ?? undefined\n      }\n\n      return await _request(this.fetch, 'GET', `${this.url}/user`, {\n        headers: this.headers,\n        jwt: jwt,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates user data for a logged in user.\n   */\n  async updateUser(\n    attributes: UserAttributes,\n    options: {\n      emailRedirectTo?: string | undefined\n    } = {}\n  ): Promise<UserResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        throw sessionError\n      }\n      if (!sessionData.session) {\n        throw new AuthSessionMissingError()\n      }\n      const session: Session = sessionData.session\n      const { data, error: userError } = await _request(this.fetch, 'PUT', `${this.url}/user`, {\n        headers: this.headers,\n        redirectTo: options?.emailRedirectTo,\n        body: attributes,\n        jwt: session.access_token,\n        xform: _userResponse,\n      })\n      if (userError) throw userError\n      session.user = data.user as User\n      await this._saveSession(session)\n      this._notifyAllSubscribers('USER_UPDATED', session)\n\n      return { data: { user: session.user }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Decodes a JWT (without performing any validation).\n   */\n  private _decodeJWT(jwt: string): {\n    exp?: number\n    aal?: AuthenticatorAssuranceLevels | null\n    amr?: AMREntry[] | null\n  } {\n    return decodeJWTPayload(jwt)\n  }\n\n  /**\n   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n   * If the refresh token or access token in the current session is invalid, an error will be thrown.\n   * @param currentSession The current session that minimally contains an access token and refresh token.\n   */\n  async setSession(currentSession: {\n    access_token: string\n    refresh_token: string\n  }): Promise<AuthResponse> {\n    try {\n      if (!currentSession.access_token || !currentSession.refresh_token) {\n        throw new AuthSessionMissingError()\n      }\n\n      const timeNow = Date.now() / 1000\n      let expiresAt = timeNow\n      let hasExpired = true\n      let session: Session | null = null\n      const payload = decodeJWTPayload(currentSession.access_token)\n      if (payload.exp) {\n        expiresAt = payload.exp\n        hasExpired = expiresAt <= timeNow\n      }\n\n      if (hasExpired) {\n        const { session: refreshedSession, error } = await this._callRefreshToken(\n          currentSession.refresh_token\n        )\n        if (error) {\n          return { data: { user: null, session: null }, error: error }\n        }\n\n        if (!refreshedSession) {\n          return { data: { user: null, session: null }, error: null }\n        }\n        session = refreshedSession\n      } else {\n        const { data, error } = await this.getUser(currentSession.access_token)\n        if (error) {\n          throw error\n        }\n        session = {\n          access_token: currentSession.access_token,\n          refresh_token: currentSession.refresh_token,\n          user: data.user,\n          token_type: 'bearer',\n          expires_in: expiresAt - timeNow,\n          expires_at: expiresAt,\n        }\n        await this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user: session.user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Returns a new session, regardless of expiry status.\n   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n   * If the current session's refresh token is invalid, an error will be thrown.\n   * @param currentSession The current session. If passed in, it must contain a refresh token.\n   */\n  async refreshSession(currentSession?: { refresh_token: string }): Promise<AuthResponse> {\n    try {\n      if (!currentSession) {\n        const { data, error } = await this.getSession()\n        if (error) {\n          throw error\n        }\n\n        currentSession = data.session ?? undefined\n      }\n\n      if (!currentSession?.refresh_token) {\n        throw new AuthSessionMissingError()\n      }\n\n      const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\n      if (error) {\n        return { data: { user: null, session: null }, error: error }\n      }\n\n      if (!session) {\n        return { data: { user: null, session: null }, error: null }\n      }\n\n      return { data: { user: session.user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Gets the session data from a URL string\n   */\n  private async _getSessionFromUrl(): Promise<\n    | {\n        data: { session: Session; redirectType: string | null }\n        error: null\n      }\n    | { data: { session: null; redirectType: null }; error: AuthError }\n  > {\n    try {\n      if (!isBrowser()) throw new AuthImplicitGrantRedirectError('No browser detected.')\n      if (!this._isImplicitGrantFlow()) {\n        throw new AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.')\n      }\n\n      const error_description = getParameterByName('error_description')\n      if (error_description) {\n        const error_code = getParameterByName('error_code')\n        if (!error_code) throw new AuthImplicitGrantRedirectError('No error_code detected.')\n        const error = getParameterByName('error')\n        if (!error) throw new AuthImplicitGrantRedirectError('No error detected.')\n\n        throw new AuthImplicitGrantRedirectError(error_description, { error, code: error_code })\n      }\n\n      const provider_token = getParameterByName('provider_token')\n      const provider_refresh_token = getParameterByName('provider_refresh_token')\n      const access_token = getParameterByName('access_token')\n      if (!access_token) throw new AuthImplicitGrantRedirectError('No access_token detected.')\n      const expires_in = getParameterByName('expires_in')\n      if (!expires_in) throw new AuthImplicitGrantRedirectError('No expires_in detected.')\n      const refresh_token = getParameterByName('refresh_token')\n      if (!refresh_token) throw new AuthImplicitGrantRedirectError('No refresh_token detected.')\n      const token_type = getParameterByName('token_type')\n      if (!token_type) throw new AuthImplicitGrantRedirectError('No token_type detected.')\n\n      const timeNow = Math.round(Date.now() / 1000)\n      const expires_at = timeNow + parseInt(expires_in)\n\n      const { data, error } = await this.getUser(access_token)\n      if (error) throw error\n      const user: User = data.user\n      const session: Session = {\n        provider_token,\n        provider_refresh_token,\n        access_token,\n        expires_in: parseInt(expires_in),\n        expires_at,\n        refresh_token,\n        token_type,\n        user,\n      }\n      const redirectType = getParameterByName('type')\n\n      // Remove tokens from URL\n      window.location.hash = ''\n\n      return { data: { session, redirectType }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, redirectType: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n   */\n  private _isImplicitGrantFlow(): boolean {\n    return (\n      isBrowser() &&\n      (Boolean(getParameterByName('access_token')) ||\n        Boolean(getParameterByName('error_description')))\n    )\n  }\n\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n   *\n   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n   */\n  async signOut(): Promise<{ error: AuthError | null }> {\n    const { data, error: sessionError } = await this.getSession()\n    if (sessionError) {\n      return { error: sessionError }\n    }\n    const accessToken = data.session?.access_token\n    if (accessToken) {\n      const { error } = await this.admin.signOut(accessToken)\n      if (error) {\n        // ignore 404s since user might not exist anymore\n        // ignore 401s since an invalid or expired JWT should sign out the current session\n        if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401))) {\n          return { error }\n        }\n      }\n    }\n    await this._removeSession()\n    this._notifyAllSubscribers('SIGNED_OUT', null)\n    return { error: null }\n  }\n\n  /**\n   * Receive a notification every time an auth event happens.\n   * @param callback A callback function to be invoked when an auth event happens.\n   */\n  onAuthStateChange(callback: (event: AuthChangeEvent, session: Session | null) => void): {\n    data: { subscription: Subscription }\n  } {\n    const id: string = uuid()\n    const subscription: Subscription = {\n      id,\n      callback,\n      unsubscribe: () => {\n        this.stateChangeEmitters.delete(id)\n      },\n    }\n\n    this.stateChangeEmitters.set(id, subscription)\n\n    return { data: { subscription } }\n  }\n\n  /**\n   * Sends a password reset request to an email address.\n   * @param email The email address of the user.\n   * @param options.redirectTo The URL to send the user to after they click the password reset link.\n   * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n   */\n  async resetPasswordForEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ): Promise<\n    | {\n        data: {}\n        error: null\n      }\n    | { data: null; error: AuthError }\n  > {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/recover`, {\n        body: { email, gotrue_meta_security: { captcha_token: options.captchaToken } },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Generates a new JWT.\n   * @param refreshToken A valid refresh token that was returned on login.\n   */\n  private async _refreshAccessToken(refreshToken: string): Promise<AuthResponse> {\n    try {\n      const startedAt = Date.now()\n\n      // will attempt to refresh the token with exponential backoff\n      return await retryable(\n        async (attempt) => {\n          await sleep(attempt * 200) // 0, 200, 400, 800, ...\n\n          return await _request(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\n            body: { refresh_token: refreshToken },\n            headers: this.headers,\n            xform: _sessionResponse,\n          })\n        },\n        (attempt, _, result) =>\n          result &&\n          result.error &&\n          result.error instanceof AuthRetryableFetchError &&\n          // retryable only if the request can be sent before the backoff overflows the tick duration\n          Date.now() + (attempt + 1) * 200 - startedAt < AUTO_REFRESH_TICK_DURATION\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, user: null }, error }\n      }\n      throw error\n    }\n  }\n\n  private _isValidSession(maybeSession: unknown): maybeSession is Session {\n    const isValidSession =\n      typeof maybeSession === 'object' &&\n      maybeSession !== null &&\n      'access_token' in maybeSession &&\n      'refresh_token' in maybeSession &&\n      'expires_at' in maybeSession\n\n    return isValidSession\n  }\n\n  private _handleProviderSignIn(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n      skipBrowserRedirect?: boolean\n    } = {}\n  ) {\n    const url: string = this._getUrlForProvider(provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes,\n      queryParams: options.queryParams,\n    })\n    // try to open on the browser\n    if (isBrowser() && !options.skipBrowserRedirect) {\n      window.location.assign(url)\n    }\n    return { data: { provider, url }, error: null }\n  }\n\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n  private async _recoverAndRefresh() {\n    try {\n      const currentSession = await getItemAsync(this.storage, this.storageKey)\n      if (!this._isValidSession(currentSession)) {\n        if (currentSession !== null) {\n          await this._removeSession()\n        }\n\n        return\n      }\n\n      const timeNow = Math.round(Date.now() / 1000)\n\n      if ((currentSession.expires_at ?? Infinity) < timeNow + EXPIRY_MARGIN) {\n        if (this.autoRefreshToken && currentSession.refresh_token) {\n          const { error } = await this._callRefreshToken(currentSession.refresh_token)\n\n          if (error) {\n            console.log(error.message)\n            await this._removeSession()\n          }\n        } else {\n          await this._removeSession()\n        }\n      } else {\n        if (this.persistSession) {\n          await this._saveSession(currentSession)\n        }\n        this._notifyAllSubscribers('SIGNED_IN', currentSession)\n      }\n    } catch (err) {\n      console.error(err)\n      return\n    }\n  }\n\n  private async _callRefreshToken(refreshToken: string): Promise<CallRefreshTokenResult> {\n    // refreshing is already in progress\n    if (this.refreshingDeferred) {\n      return this.refreshingDeferred.promise\n    }\n\n    try {\n      this.refreshingDeferred = new Deferred<CallRefreshTokenResult>()\n\n      if (!refreshToken) {\n        throw new AuthSessionMissingError()\n      }\n      const { data, error } = await this._refreshAccessToken(refreshToken)\n      if (error) throw error\n      if (!data.session) throw new AuthSessionMissingError()\n\n      await this._saveSession(data.session)\n      this._notifyAllSubscribers('TOKEN_REFRESHED', data.session)\n\n      const result = { session: data.session, error: null }\n\n      this.refreshingDeferred.resolve(result)\n\n      return result\n    } catch (error) {\n      if (isAuthError(error)) {\n        const result = { session: null, error }\n\n        this.refreshingDeferred?.resolve(result)\n\n        return result\n      }\n\n      this.refreshingDeferred?.reject(error)\n      throw error\n    } finally {\n      this.refreshingDeferred = null\n    }\n  }\n\n  private _notifyAllSubscribers(event: AuthChangeEvent, session: Session | null, broadcast = true) {\n    if (this.broadcastChannel && broadcast) {\n      this.broadcastChannel.postMessage({ event, session })\n    }\n\n    this.stateChangeEmitters.forEach((x) => x.callback(event, session))\n  }\n\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n  private async _saveSession(session: Session) {\n    if (!this.persistSession) {\n      this.inMemorySession = session\n    }\n\n    if (this.persistSession && session.expires_at) {\n      await this._persistSession(session)\n    }\n  }\n\n  private _persistSession(currentSession: Session) {\n    return setItemAsync(this.storage, this.storageKey, currentSession)\n  }\n\n  private async _removeSession() {\n    if (this.persistSession) {\n      await removeItemAsync(this.storage, this.storageKey)\n    } else {\n      this.inMemorySession = null\n    }\n  }\n\n  /**\n   * Removes any registered visibilitychange callback.\n   *\n   * {@see #startAutoRefresh}\n   * {@see #stopAutoRefresh}\n   */\n  private _removeVisibilityChangedCallback() {\n    const callback = this.visibilityChangedCallback\n    this.visibilityChangedCallback = null\n\n    try {\n      if (callback && isBrowser() && window?.removeEventListener) {\n        window.removeEventListener('visibilitychange', callback)\n      }\n    } catch (e) {\n      console.error('removing visibilitychange callback failed', e)\n    }\n  }\n\n  /**\n   * This is the private implementation of {@link #startAutoRefresh}. Use this\n   * within the library.\n   */\n  private async _startAutoRefresh() {\n    await this._stopAutoRefresh()\n\n    const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION)\n    this.autoRefreshTicker = ticker\n\n    if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\n      // ticker is a NodeJS Timeout object that has an `unref` method\n      // https://nodejs.org/api/timers.html#timeoutunref\n      // When auto refresh is used in NodeJS (like for testing) the\n      // `setInterval` is preventing the process from being marked as\n      // finished and tests run endlessly. This can be prevented by calling\n      // `unref()` on the returned object.\n      ticker.unref()\n    }\n\n    // run the tick immediately\n    await this._autoRefreshTokenTick()\n  }\n\n  /**\n   * This is the private implementation of {@link #stopAutoRefresh}. Use this\n   * within the library.\n   */\n  private async _stopAutoRefresh() {\n    const ticker = this.autoRefreshTicker\n    this.autoRefreshTicker = null\n\n    if (ticker) {\n      clearInterval(ticker)\n    }\n  }\n\n  /**\n   * Starts an auto-refresh process in the background. The session is checked\n   * every few seconds. Close to the time of expiration a process is started to\n   * refresh the session. If refreshing fails it will be retried for as long as\n   * necessary.\n   *\n   * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\n   * to call this function, it will be called for you.\n   *\n   * On browsers the refresh process works only when the tab/window is in the\n   * foreground to conserve resources as well as prevent race conditions and\n   * flooding auth with requests. If you call this method any managed\n   * visibility change callback will be removed and you must manage visibility\n   * changes on your own.\n   *\n   * On non-browser platforms the refresh process works *continuously* in the\n   * background, which may not be desireable. You should hook into your\n   * platform's foreground indication mechanism and call these methods\n   * appropriately to conserve resources.\n   *\n   * {@see #stopAutoRefresh}\n   */\n  async startAutoRefresh() {\n    this._removeVisibilityChangedCallback()\n    await this._startAutoRefresh()\n  }\n\n  /**\n   * Stops an active auto refresh process running in the background (if any).\n   *\n   * If you call this method any managed visibility change callback will be\n   * removed and you must manage visibility changes on your own.\n   *\n   * See {@link #startAutoRefresh} for more details.\n   */\n  async stopAutoRefresh() {\n    this._removeVisibilityChangedCallback()\n    await this._stopAutoRefresh()\n  }\n\n  /**\n   * Runs the auto refresh token tick.\n   */\n  private async _autoRefreshTokenTick() {\n    const now = Date.now()\n\n    try {\n      const {\n        data: { session },\n      } = await this.getSession()\n\n      if (!session || !session.refresh_token || !session.expires_at) {\n        return\n      }\n\n      // session will expire in this many ticks (or has already expired if <= 0)\n      const expiresInTicks = Math.floor(\n        (session.expires_at * 1000 - now) / AUTO_REFRESH_TICK_DURATION\n      )\n\n      if (expiresInTicks < AUTO_REFRESH_TICK_THRESHOLD) {\n        await this._callRefreshToken(session.refresh_token)\n      }\n    } catch (e: any) {\n      console.error('Auto refresh tick failed with error. This is likely a transient error.', e)\n    }\n  }\n\n  /**\n   * Registers callbacks on the browser / platform, which in-turn run\n   * algorithms when the browser window/tab are in foreground. On non-browser\n   * platforms it assumes always foreground.\n   */\n  private async _handleVisibilityChange() {\n    if (!isBrowser() || !window?.addEventListener) {\n      if (this.autoRefreshToken) {\n        // in non-browser environments the refresh token ticker runs always\n        this.startAutoRefresh()\n      }\n\n      return false\n    }\n\n    try {\n      this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false)\n\n      window?.addEventListener('visibilitychange', this.visibilityChangedCallback)\n\n      // now immediately call the visbility changed callback to setup with the\n      // current visbility state\n      await this._onVisibilityChanged(true) // initial call\n    } catch (error) {\n      console.error('_handleVisibilityChange', error)\n    }\n  }\n\n  /**\n   * Callback registered with `window.addEventListener('visibilitychange')`.\n   */\n  private async _onVisibilityChanged(isInitial: boolean) {\n    if (document.visibilityState === 'visible') {\n      if (!isInitial) {\n        // initial visibility change setup is handled in another flow under #initialize()\n        await this.initializePromise\n        await this._recoverAndRefresh()\n      }\n\n      if (this.autoRefreshToken) {\n        // in browser environments the refresh token ticker runs only on focused tabs\n        // which prevents race conditions\n        this._startAutoRefresh()\n      }\n    } else if (document.visibilityState === 'hidden') {\n      if (this.autoRefreshToken) {\n        this._stopAutoRefresh()\n      }\n    }\n  }\n\n  /**\n   * Generates the relevant login URL for a third-party provider.\n   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n   */\n  private _getUrlForProvider(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n    }\n  ) {\n    const urlParams: string[] = [`provider=${encodeURIComponent(provider)}`]\n    if (options?.redirectTo) {\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`)\n    }\n    if (options?.scopes) {\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`)\n    }\n    if (options?.queryParams) {\n      const query = new URLSearchParams(options.queryParams)\n      urlParams.push(query.toString())\n    }\n    return `${this.url}/authorize?${urlParams.join('&')}`\n  }\n\n  private async _unenroll(params: MFAUnenrollParams): Promise<AuthMFAUnenrollResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      return await _request(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\n        headers: this.headers,\n        jwt: sessionData?.session?.access_token,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#enroll}\n   */\n  private async _enroll(params: MFAEnrollParams): Promise<AuthMFAEnrollResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/factors`, {\n        body: {\n          friendly_name: params.friendlyName,\n          factor_type: params.factorType,\n          issuer: params.issuer,\n        },\n        headers: this.headers,\n        jwt: sessionData?.session?.access_token,\n      })\n\n      if (error) {\n        return { data: null, error }\n      }\n\n      if (data?.totp?.qr_code) {\n        data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`\n      }\n\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#verify}\n   */\n  private async _verify(params: MFAVerifyParams): Promise<AuthMFAVerifyResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      const { data, error } = await _request(\n        this.fetch,\n        'POST',\n        `${this.url}/factors/${params.factorId}/verify`,\n        {\n          body: { code: params.code, challenge_id: params.challengeId },\n          headers: this.headers,\n          jwt: sessionData?.session?.access_token,\n        }\n      )\n      if (error) {\n        return { data: null, error }\n      }\n\n      await this._saveSession({\n        expires_at: Math.round(Date.now() / 1000) + data.expires_in,\n        ...data,\n      })\n      this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data)\n\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#challenge}\n   */\n  private async _challenge(params: MFAChallengeParams): Promise<AuthMFAChallengeResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      return await _request(\n        this.fetch,\n        'POST',\n        `${this.url}/factors/${params.factorId}/challenge`,\n        {\n          headers: this.headers,\n          jwt: sessionData?.session?.access_token,\n        }\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#challengeAndVerify}\n   */\n  private async _challengeAndVerify(\n    params: MFAChallengeAndVerifyParams\n  ): Promise<AuthMFAVerifyResponse> {\n    const { data: challengeData, error: challengeError } = await this._challenge({\n      factorId: params.factorId,\n    })\n    if (challengeError) {\n      return { data: null, error: challengeError }\n    }\n    return await this._verify({\n      factorId: params.factorId,\n      challengeId: challengeData.id,\n      code: params.code,\n    })\n  }\n\n  /**\n   * {@see GoTrueMFAApi#listFactors}\n   */\n  private async _listFactors(): Promise<AuthMFAListFactorsResponse> {\n    const {\n      data: { user },\n      error: userError,\n    } = await this.getUser()\n    if (userError) {\n      return { data: null, error: userError }\n    }\n\n    const factors = user?.factors || []\n    const totp = factors.filter(\n      (factor) => factor.factor_type === 'totp' && factor.status === 'verified'\n    )\n\n    return {\n      data: {\n        all: factors,\n        totp,\n      },\n      error: null,\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\n   */\n  private async _getAuthenticatorAssuranceLevel(): Promise<AuthMFAGetAuthenticatorAssuranceLevelResponse> {\n    const {\n      data: { session },\n      error: sessionError,\n    } = await this.getSession()\n    if (sessionError) {\n      return { data: null, error: sessionError }\n    }\n    if (!session) {\n      return {\n        data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },\n        error: null,\n      }\n    }\n\n    const payload = this._decodeJWT(session.access_token)\n\n    let currentLevel: AuthenticatorAssuranceLevels | null = null\n\n    if (payload.aal) {\n      currentLevel = payload.aal\n    }\n\n    let nextLevel: AuthenticatorAssuranceLevels | null = currentLevel\n\n    const verifiedFactors =\n      session.user.factors?.filter((factor: Factor) => factor.status === 'verified') ?? []\n\n    if (verifiedFactors.length > 0) {\n      nextLevel = 'aal2'\n    }\n\n    const currentAuthenticationMethods = payload.amr || []\n\n    return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}